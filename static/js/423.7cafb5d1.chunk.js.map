{"version":3,"file":"static/js/423.7cafb5d1.chunk.js","mappings":"oRAEaA,EAAWC,EAAAA,EAAAA,GAAH,wRAaRC,EAAWD,EAAAA,EAAAA,GAAH,qH,SC0CrB,EAjDa,WACX,IACQE,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAoCF,EAAAA,EAAAA,WAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,8GAEOC,EAAAA,EAAAA,IAAQT,GAFf,OAEVU,EAFU,OAGhBN,EAAcM,EAASC,KAAKC,MAC5BC,QAAQC,IAAIJ,EAASC,KAAKC,MACQ,IAA9BF,EAASC,KAAKC,KAAKG,QACrBT,GAAc,GANA,gDAShBO,QAAQC,IAAI,KAAME,SATF,yDAAH,qDAYjBR,GACD,GAAE,CAACR,KAGF,UAACH,EAAD,WACGQ,IAAc,uBAAG,2CACjBF,EAAWc,KAAI,SAAAC,GAAS,OACvB,UAACnB,EAAD,YACE,gBACEoB,IACED,EAAUE,aAAV,UA5BM,mCA4BN,OACmBF,EAAUE,c,00SAG/BC,IAAKH,EAAUI,KACfC,MAAO,OAET,0BACE,uBAAG,WACFL,EAAUI,SAEb,0BACE,uBAAG,eAAc,IAAEJ,EAAUA,eAflBA,EAAUlB,GADF,MAsB9B,C,mMCrDKwB,EAAU,mCAEHC,EAAkB,mCAAG,4FACf,kDACXC,EAAS,CACbC,QAASH,GAHqB,SAKFI,EAAAA,EAAAA,IAJb,kDAIiC,CAAEF,OAAAA,IALpB,cAK1BG,EAL0B,yBAMzBA,GANyB,2CAAH,qDASlBC,EAAa,mCAAG,WAAMC,GAAN,kFACrBC,EADqB,6CAC4BD,GACjDL,EAAS,CACbC,QAASH,GAHgB,SAKFI,EAAAA,EAAAA,IAAUI,EAAU,CAAEN,OAAAA,IALpB,cAKrBO,EALqB,yBAMpBA,GANoB,2CAAH,sDASbxB,EAAO,mCAAG,WAAMsB,GAAN,kFACfC,EADe,6CACkCD,EADlC,YAEfL,EAAS,CACbC,QAASH,GAHU,SAKFI,EAAAA,EAAAA,IAAUI,EAAU,CAAEN,OAAAA,IALpB,cAKfd,EALe,yBAMdA,GANc,2CAAH,sDASPsB,EAAU,mCAAG,WAAMH,GAAN,kFAClBC,EADkB,6CAC+BD,EAD/B,YAElBL,EAAS,CACbC,QAASH,GAHa,SAKLI,EAAAA,EAAAA,IAAUI,EAAU,CAAEN,OAAAA,IALjB,cAKlBd,EALkB,yBAMjBA,GANiB,2CAAH,sDASVuB,EAAe,mCAAG,WAAMC,GAAN,2HAEvBV,EAAS,CACbC,QAASH,EACTa,MAAM,GAAD,OAAKD,IAJiB,SAMRR,EAAAA,EAAAA,IANQ,4CAMY,CAAEF,OAAAA,IANd,cAMvBY,EANuB,yBAOtBA,GAPsB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/moviesApi.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(170px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItem = styled.li`\n  p {\n    max-width: 180px;\n    font-size: 14px;\n  }\n\n  img {\n    height: 270px;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/moviesApi';\n\nimport placeholder from '../../img/holdercast.jpeg';\n\nimport { CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n  const { id } = useParams();\n  const [characters, setCharacters] = useState([]);\n  const [isNotFound, setIsNotFound] = useState(false);\n\n  useEffect(() => {\n    const getCastList = async () => {\n      try {\n        const castList = await getCast(id);\n        setCharacters(castList.data.cast);\n        console.log(castList.data.cast);\n        if (castList.data.cast.length === 0) {\n          setIsNotFound(true);\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getCastList();\n  }, [id]);\n\n  return (\n    <CastList>\n      {isNotFound && <p>We don't find any casts for this movie</p>}\n      {characters.map(character => (\n        <CastItem key={character.id}>\n          <img\n            src={\n              character.profile_path\n                ? `${IMAGE_URL}${character.profile_path}`\n                : placeholder\n            }\n            alt={character.name}\n            width={180}\n          />\n          <p>\n            <b>Name: </b>\n            {character.name}\n          </p>\n          <p>\n            <b>Character:</b> {character.character}\n          </p>\n        </CastItem>\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'f1b5155c1184f9f972000fc60d38fc3a';\n\nexport const getTrendsDayMovies = async () => {\n  const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n  const params = {\n    api_key: API_KEY,\n  };\n  const moviesDayTrends = await axios.get(BASE_URL, { params });\n  return moviesDayTrends;\n};\n\nexport const getMoviesById = async movieId => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${movieId}`;\n  const params = {\n    api_key: API_KEY,\n  };\n  const moviesById = await axios.get(BASE_URL, { params });\n  return moviesById;\n};\n\nexport const getCast = async movieId => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n  const params = {\n    api_key: API_KEY,\n  };\n  const cast = await axios.get(BASE_URL, { params });\n  return cast;\n};\n\nexport const getReviews = async movieId => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n  const params = {\n    api_key: API_KEY,\n  };\n  const cast = await axios.get(BASE_URL, { params });\n  return cast;\n};\n\nexport const getSearchMovies = async querySearch => {\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n  const params = {\n    api_key: API_KEY,\n    query: `${querySearch}`,\n  };\n  const movies = await axios.get(BASE_URL, { params });\n  return movies;\n};\n"],"names":["CastList","styled","CastItem","id","useParams","useState","characters","setCharacters","isNotFound","setIsNotFound","useEffect","getCastList","getCast","castList","data","cast","console","log","length","message","map","character","src","profile_path","alt","name","width","API_KEY","getTrendsDayMovies","params","api_key","axios","moviesDayTrends","getMoviesById","movieId","BASE_URL","moviesById","getReviews","getSearchMovies","querySearch","query","movies"],"sourceRoot":""}