{"version":3,"file":"static/js/926.35728f91.chunk.js","mappings":"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","sources":["components/BackLink/BackLink.styled.js","components/BackLink/BackLink.jsx","pages/TrendsMovieDetails.styled.js","pages/TrendsMovieDetails.jsx","services/moviesApi.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import { HiArrowLeft } from 'react-icons/hi';\nimport { StyledLink } from './BackLink.styled';\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"20\" />\n      {children}\n    </StyledLink>\n  );\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieDetailsWrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  padding: 20px;\n`;\n\nexport const MovieDetailsImg = styled.div`\n  img {\n    box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);\n  }\n`;\n\nexport const MovieDetailsInfo = styled.div`\n  max-width: 480px;\n  h2 {\n    margin-top: 20 px;\n  }\n`;\n\nexport const MovieAddInfoWrap = styled.div`\n  h2 {\n    font-size: 16px;\n  }\n\n  ul {\n    display: flex;\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 0;\n    list-style: none;\n  }\n`;\n\nexport const Link = styled(NavLink)`\n  display: block;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  text-decoration: none;\n  color: black;\n\n  &:hover {\n    color: orangered;\n  }\n\n  &.active {\n    color: orangered;\n  }\n`;\n","import { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMoviesById } from 'services/moviesApi';\nimport { BackLink } from 'components/BackLink/BackLink';\n\nimport {\n  MovieDetailsWrap,\n  MovieDetailsImg,\n  MovieDetailsInfo,\n  MovieAddInfoWrap,\n  Link,\n} from './TrendsMovieDetails.styled';\n\nconst TrendsMovieDetails = () => {\n  const location = useLocation();\n  const backLinkGref = location.state?.from ?? '/movies';\n\n  const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n  const { id } = useParams();\n\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [movieGenres, setMovieGenres] = useState([]);\n\n  let genres = movieGenres.map(genre => genre.name).join(', ');\n\n  useEffect(() => {\n    const getMoviesDetails = async () => {\n      try {\n        const movieTrendsDetails = await getMoviesById(id);\n        setMovieDetails(movieTrendsDetails.data);\n        setMovieGenres(movieTrendsDetails.data.genres);\n        console.log(movieTrendsDetails.data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getMoviesDetails();\n  }, [id]);\n\n  return (\n    <div>\n      <BackLink to={backLinkGref}>BACK TO TREND MOVIES</BackLink>\n      {movieDetails && (\n        <div>\n          <MovieDetailsWrap>\n            <MovieDetailsImg>\n              <img\n                src={`${IMAGE_URL}${movieDetails.poster_path}`}\n                alt={movieDetails.original_title}\n                width={180}\n              />\n            </MovieDetailsImg>\n            <MovieDetailsInfo>\n              <h2>{movieDetails.original_title}</h2>\n              <p>\n                <b>Overview:</b> {movieDetails.overview}\n              </p>\n              <p>\n                <b>Genres:</b> {genres}\n              </p>\n            </MovieDetailsInfo>\n          </MovieDetailsWrap>\n\n          <MovieAddInfoWrap>\n            <h2>Additional Information</h2>\n            <ul>\n              <li>\n                <Link to=\"cast\" state={{ from: backLinkGref }}>\n                  Cast\n                </Link>\n              </li>\n              <li>\n                <Link to=\"reviews\" state={{ from: backLinkGref }}>\n                  Rewiew\n                </Link>\n              </li>\n            </ul>\n          </MovieAddInfoWrap>\n\n          <Outlet />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TrendsMovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'f1b5155c1184f9f972000fc60d38fc3a';\n\nexport const getTrendsDayMovies = async () => {\n  const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n  const params = {\n    api_key: API_KEY,\n  };\n  const moviesDayTrends = await axios.get(BASE_URL, { params });\n  return moviesDayTrends;\n};\n\nexport const getMoviesById = async movieId => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${movieId}`;\n  const params = {\n    api_key: API_KEY,\n  };\n  const moviesById = await axios.get(BASE_URL, { params });\n  return moviesById;\n};\n\nexport const getCast = async movieId => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n  const params = {\n    api_key: API_KEY,\n  };\n  const cast = await axios.get(BASE_URL, { params });\n  return cast;\n};\n\nexport const getReviews = async movieId => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n  const params = {\n    api_key: API_KEY,\n  };\n  const cast = await axios.get(BASE_URL, { params });\n  return cast;\n};\n\nexport const getSearchMovies = async querySearch => {\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n  const params = {\n    api_key: API_KEY,\n    query: `${querySearch}`,\n  };\n  const movies = await axios.get(BASE_URL, { params });\n  return movies;\n};\n"],"names":["StyledLink","styled","Link","BackLink","to","children","size","MovieDetailsWrap","MovieDetailsImg","MovieDetailsInfo","MovieAddInfoWrap","NavLink","backLinkGref","useLocation","state","from","id","useParams","useState","movieDetails","setMovieDetails","movieGenres","setMovieGenres","genres","map","genre","name","join","useEffect","getMoviesDetails","getMoviesById","movieTrendsDetails","data","console","log","message","src","poster_path","alt","original_title","width","overview","API_KEY","getTrendsDayMovies","params","api_key","axios","moviesDayTrends","movieId","BASE_URL","moviesById","getCast","cast","getReviews","getSearchMovies","querySearch","query","movies"],"sourceRoot":""}